type Query {
  selectUser(id: Int!): User
  allUsers: [User!]!
  draftsByUser(userUniqueInput: UserUniqueInput!): [Post]
  feed(
    orderBy: PostOrderByUpdatedAtInput
    searchString: String
    skip: Int
    take: Int
  ): [Post!]!
  postById(id: Int): Post
  allComments: [Comment!]!
}

type Mutation {
  createDraft(authorEmail: String!, data: PostCreateInput!): Post
  deletePost(id: Int!): Post
  incrementPostViewCount(id: Int!): Post
  signupUser(data: UserCreateInput!): User!
  deleteUser(id: Int!): User!
  togglePublishPost(id: Int!): Post
  addProfileForUser(bio: String, userUniqueInput: UserUniqueInput): Profile
  """
  公開済みPost情報にCommentを追加する
  """
  createComment(data: CommentCreateInput!, postId: Int!): Comment
}

type User {
  id: Int!
  email: String!
  # id: ID! @unique
  name: String!
  age: Int
  memo: String
  posts: [Post!]!
  profile: Profile
}

type Post {
  id: Int!
  author: User
  content: String
  createdAt: DateTime!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
  viewCount: Int!
  comments: [Comment!]!
}

type Profile {
  id: ID!
  bio: String
  user: User
}

type Comment {
  id: ID!
  text: String
  author: User!
  post: Post!
}

input UserCreateInput {
  email: String!
  name: String
  age: Int
  memo: String
  posts: [PostCreateInput!]
  comments: [CommentCreateInput!]
}

input PostCreateInput {
  content: String
  title: String!
}

input CommentCreateInput {
  text: String!
}

input PostOrderByUpdatedAtInput {
  updatedAt: SortOrder!
}

input UserUniqueInput {
  id: Int
  # id: ID! @unique
  email: String
}

enum SortOrder {
  asc
  desc
}

scalar DateTime
